[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'haishanh/night-owl.vim'

[[plugins]]
repo = 'gosukiwi/vim-atom-dark'

[[plugins]]
repo = 'Shougo/neocomplete'
hook_add = '''
    " Vim起動時にneocompleteを有効にする
    let g:neocomplete#enable_at_startup = 1
    " smartcase有効化:大文字が入力されるまで大文字小文字の区別を無視する
    let g:neocomplete#enable_smart_case = 1
    " 3文字以上の単語に対して補完を有効にする
    let g:neocomplete#min_keyword_length = 3
    " 区切り文字まで補完する
    " let g:neocomplete#enable_auto_delimiter = 1
    " 1文字目の入力から補完のポップアップを表示
    let g:neocomplete#auto_completion_start_length = 1
    " バックスペースで補完のポップアップを閉じる
    inoremap <expr><BS> neocomplete#smart_close_popup()."<C-h>"
    " 補完候補が表示されている場合は確定。そうでない場合は改行
    inoremap <expr><CR>  pumvisible() ? neocomplete#close_popup() : "<CR>"

    " Ctrl-Lで共通部分を補完
    inoremap <expr><C-l> neocomplete#complete_common_string()
'''

[[plugins]]
repo = 'Shougo/neosnippet'
hook_add = '''
    " スニペットの展開,ジャンプをCtrl-Kにマップ
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)

    " Enterで補完候補の確定,スニペットの展開
    " imap <expr><CR> neosnippet#expandable() ? "<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "<C-y>" : "<CR>"
    " Tabで補完候補の選択,スニペット内のジャンプ
    " imap <expr><TAB> pumvisible() ? "<C-n>" : neosnippet#jumpable() ? "<Plug>(neosnippet_expand_or_jump)" : "<TAB>"
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/unite.vim'
hook_add = '''
    " ヒストリー/ヤンク機能を有効化
    let g:unite_source_history_yank_enable =1
    " prefix keyの設定
    nmap <Space> [unite]

    " スペースキーとaキーでカレントディレクトリを表示
    nnoremap <silent> [unite]a :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
    " スペースキーとfキーでバッファと最近開いたファイル一覧を表示
    nnoremap <silent> [unite]f :<C-u>Unite<Space>buffer file_mru<CR>
    " スペースキーとdキーで最近開いたディレクトリを表示
    nnoremap <silent> [unite]d :<C-u>Unite<Space>directory_mru<CR>
    " スペースキーとbキーでバッファを表示
    nnoremap <silent> [unite]b :<C-u>Unite<Space>buffer<CR>
    " スペースキーとrキーでレジストリを表示
    nnoremap <silent> [unite]r :<C-u>Unite<Space>register<CR>
    " スペースキーとtキーでタブを表示
    nnoremap <silent> [unite]t :<C-u>Unite<Space>tab<CR>
    " スペースキーとhキーでヒストリ/ヤンクを表示
    nnoremap <silent> [unite]h :<C-u>Unite<Space>history/yank<CR>
    " スペースキーとoキーでoutline
    nnoremap <silent> [unite]o :<C-u>Unite<Space>outline<CR>
    " スペースキーとENTERキーでfile_rec:!
    nnoremap <silent> [unite]<CR> :<C-u>Unite<Space>file_rec:!<CR>
    " unite.vimを開いている間のキーマッピング
    autocmd FileType unite call s:unite_my_settings()
    function! s:unite_my_settings()"{{{
        " ESCでuniteを終了
        nmap <buffer> <ESC> <Plug>(unite_exit)
    endfunction"}}}
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    map <C-n> :NERDTreeToggle<CR>
    " 起動時にブックマークを表示する
    let g:NERDTreeShowBookmarks=1
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
    let g:indentLine_faster = 1
'''

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'tpope/vim-surround'
hook_add = '''
    let g:surround_{char2nr("「")} = "「 \r 」"
    let g:surround_{char2nr("」")} = "「\r」"
    let g:surround_{char2nr("【")} = "【 \r 】"
    let g:surround_{char2nr("】")} = "【\r】"
    let g:surround_{char2nr("（")} = "（ \r ）"
    let g:surround_{char2nr("）")} = "（\r）"
    let g:surround_{char2nr("＜")} = "＜ \r ＞"
    let g:surround_{char2nr("＞")} = "＜\r＞"
    let g:surround_{char2nr("｛")} = "｛ \r ｝"
    let g:surround_{char2nr("｝")} = "｛\r｝"
'''

[[plugins]]
repo = 'tomtom/tcomment_vim'
hook_add = '''
    " コメント前にスペースを入れたくない言語
    " au FileType vim,zsh,css,php,cs let g:tcomment#options = {'whitespace': 'no'}
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
    let g:airline_theme = 'papercolor'
    let g:airline#extensions#tabline#enabled = 1
    let g:airline_powerline_fonts = 1
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
